# This is the reference file for strict linting.
# Last updated vor ESLint v2.10.2
---
  rules:

  # Possible Errors
    comma-dangle: [2, never] # [2, never], disallow or enforce trailing commas
    no-cond-assign: 2 # 2, disallow assignment in conditional expressions
    no-console: 0 # 0, disallow use of console (off by default in the node environment)
    no-constant-condition: 2 # 2, disallow use of constant expressions in conditions
    no-control-regex: 2 # 2, disallow control characters in regular expressions
    no-debugger: 2 # 2, disallow use of debugger
    no-dupe-args: 2 # 2, disallow duplicate arguments in functions
    no-dupe-keys: 2 # 2, disallow duplicate keys when creating object literals
    no-duplicate-case: 2 # 2, disallow a duplicate case label
    no-empty: 2 # 2, disallow empty statements
    no-empty-character-class: 2 # 2, disallow the use of empty character classes in regular expressions
    no-ex-assign: 2 # 2, disallow assigning to the exception in a catch block
    no-extra-boolean-cast: 2 # 2, disallow double-negation boolean casts in a boolean context
    no-extra-parens: 1 # 0, disallow unnecessary parentheses
    no-extra-semi: 2 # 2, disallow unnecessary semicolons
    no-func-assign: 2 # 2, disallow overwriting functions written as function declarations
    no-inner-declarations: [2, functions] # [2, functions], disallow function or variable declarations in nested blocks
    no-invalid-regexp: 2 # 2, disallow invalid regular expression strings in the RegExp constructor
    no-irregular-whitespace: 2 # 2, disallow irregular whitespace outside of strings and comments
    no-negated-in-lhs: 2 # 2, disallow negation of the left operand of an in expression
    no-obj-calls: 2 # 2, disallow the use of object properties of the global object (Math and JSON) as functions
    no-regex-spaces: 2 # 2, disallow multiple spaces in a regular expression literal
    no-sparse-arrays: 2 # 2, disallow sparse arrays
    no-unexpected-multiline: 2 #2, disallow confusing multiline expressions
    no-unreachable: 2 # 2, disallow unreachable statements after a return, throw, continue, or break statement
    no-unsafe-finally: 2 #, disallow control flow statements in finally blocks
    use-isnan: 2 # 2, disallow comparisons with the value NaN
    valid-jsdoc: [1, {prefer: {return: returns}, requireReturn: false}] # 0, Ensure JSDoc comments are valid
    valid-typeof: 2 # 2, Ensure that the results of typeof are compared against a valid string

  # Best Practices
    accessor-pairs: 0 # 0, Enforces getter/setter pairs in objects
    array-callback-return: 1 # enforce return statements in callbacks of array methods
    block-scoped-var: 1 # 0, treat var statements as if they were block scoped
    complexity: [0, 11] # [0, 11], specify the maximum cyclomatic complexity allowed in a program
    consistent-return: 0 # 2, require return statements to either always or never specify values
    curly: [2, all] # [2, all], specify curly brace conventions for all control statements
    default-case: 1 # 0, require default case in switch statements
    dot-location: [2, property] # 0, enforces consistent newlines before or after dots
    dot-notation: [2, {allowKeywords: true}] # [2, {allowKeywords: true}], encourages use of dot notation whenever possible
    eqeqeq: 2 # 2, require the use of === and !==
    guard-for-in: 0 # 0, make sure for-in loops have an if statement
    no-alert: 2 # 2, disallow the use of alert, confirm, and prompt
    no-caller: 2 # 2, disallow use of arguments.caller or arguments.callee
    no-case-declarations: 1 # disallow lexical declarations in case clauses
    no-div-regex: 2 # 0, disallow division operators explicitly at beginning of regular expression
    no-else-return: 0 # 0, disallow else after a return in an if
    no-empty-function: 2 # disallow empty functions
    no-empty-pattern: 2 # disallow empty destructuring patterns
    no-eq-null: 2 # 0, disallow comparisons to null without a type-checking operator
    no-eval: 2 # 2, disallow use of eval()
    no-extend-native: 2 # 2, disallow adding to native types
    no-extra-bind: 2 # 2, disallow unnecessary function binding
    no-extra-label: 2 # disallow unnecessary labels
    no-fallthrough: 2 # 2, disallow fallthrough of case statements
    no-floating-decimal: 2 # 0, disallow the use of leading or trailing decimal points in numeric literals
    no-implicit-coercion: 1 # disallow shorthand type conversions
    no-implicit-globals: 1 # disallow var and named function declarations in the global scope
    no-implied-eval: 2 # 2, disallow use of eval()-like methods
    no-invalid-this: 0 # disallow this keywords outside of classes or class-like objects
    no-iterator: 2 # 2, disallow usage of __iterator__ property
    no-labels: 2 # 2, disallow use of labeled statements
    no-lone-blocks: 2 # 2, disallow unnecessary nested blocks
    no-loop-func: 2 # 2, disallow creation of functions within loops
    no-magic-numbers: 0 # disallow magic numbers
    no-multi-spaces: 2 # 2, disallow use of multiple spaces
    no-multi-str: 2 # 2, disallow use of multiline strings
    no-native-reassign: 2 # 2, disallow reassignments of native objects
    no-new: 2 # 2, disallow use of new operator when not part of the assignment or comparison
    no-new-func: 2 # 2, disallow use of new operator for Function object
    no-new-wrappers: 2 # 2, disallows creating new instances of String,Number, and Boolean
    no-octal: 2 # 2, disallow use of octal literals
    no-octal-escape: 2 # 2, disallow use of octal escape sequences in string literals, such as var foo = "Copyright \251";
    no-param-reassign: 0 # 0, disallow reassignment of function parameters (off by default)
    no-proto: 2 # 2, disallow usage of __proto__ property
    no-redeclare: 2 # 2, disallow declaring the same variable more than once
    no-return-assign: 2 # 2, disallow use of assignment in return statement
    no-script-url: 2 # 2, disallow use of javascript: urls
    no-self-assign: 2 # 2, disallow assignments where both sides are exactly the same
    no-self-compare: 2 # 0, disallow comparisons where both sides are exactly the same
    no-sequences: 2 # 2, disallow use of comma operator
    no-throw-literal: 2 # 0, restrict what can be thrown as an exception
    no-unmodified-loop-condition: 1 # disallow unmodified loop conditions
    no-unused-expressions: 2 # 2, disallow usage of expressions in statement position
    no-unused-labels: 2 # 2, disallow unused labels
    no-useless-call: 1 # disallow unnecessary calls to .call() and .apply()
    no-useless-concat: 1 # disallow unnecessary concatenation of literals or template literals
    no-useless-escape: 1 # disallow unnecessary escape characters
    no-void: 2 # 0, disallow use of void operator
    no-warning-comments: 0 # [0, { terms: [todo, fixme, xxx], location: start }], disallow usage of configurable warning terms in comments - e.g. TODO or FIXME
    no-with: 2 # 2, disallow use of the with statement
    radix: 2 # 0, require use of the second argument for parseInt()
    vars-on-top: 0 # 0, requires to declare all vars on top of their containing scope
    wrap-iife: [2, outside] # 0, require immediate function invocation to be wrapped in parentheses
    yoda: [2, never, {exceptRange: true}] # [2, never], require or disallow Yoda conditions

  # Strict Mode
    strict: [1, function] # 2, controls location of Use Strict Directives

  # Variables
    init-declarations: 0 # require or disallow initialization in var declarations
    no-catch-shadow: 2 # 2, disallow the catch clause parameter name being the same as a variable in the outer scope
    no-delete-var: 2 # 2, disallow deletion of variables
    no-label-var: 2 # 2, disallow labels that share a name with a variable
    no-restricted-globals: 0 # disallow specified global variables
    no-shadow: 2 # 2, disallow var declarations from shadowing variables in the outer scope
    no-shadow-restricted-names: 2 # 2, disallow shadowing of names such as arguments
    no-undef-init: 2 # 2, disallow use of undefined when initializing variables
    no-undefined: 1 # 0, disallow use of undefined variable
    no-use-before-define: 2 # 2, disallow use of variables before they are defined

  # Node.js
    callback-return: 0 # require return statements after callbacks
    global-require: 0 # require require() calls to be placed at top-level module scope
    handle-callback-err: 0 # require error handling in callbacks
    no-mixed-requires: 0 # disallow require calls to be mixed with regular var declarations
    no-new-require: 0 # disallow new operators with calls to require
    no-path-concat: 0 # disallow string concatenation with __dirname and __filename
    no-process-env: 0 # disallow the use of process.env
    no-process-exit: 0 # disallow the use of process.exit()
    no-restricted-modules: 0 # disallow specified modules when loaded by require
    no-sync: 0 # disallow synchronous methods

  # Stylistic Issues
    array-bracket-spacing: 1 # enforce consistent spacing inside array brackets
    block-spacing: 1 # enforce consistent spacing inside single-line blocks
    brace-style: [2, 1tbs] # [0, 1tbs], enforce one true brace style
    camelcase: [2, {properties: never}] # 2, require camel case names
    comma-spacing: 2 # 2, enforce spacing before and after comma
    comma-style: 2 # 0, enforce one true comma style
    computed-property-spacing: [1, never] # [0, never], require or disallow padding inside computed properties
    consistent-this: [2, that] # [0, that], enforces consistent naming when capturing the current execution context
    eol-last: 2 # 2, enforce newline at the end of file, with no multiple empty lines
    func-names: 0 # 0, require function expressions to have a name
    func-style: [0, declaration] # [0, declaration], enforces use of function declarations or expressions
    id-blacklist: 0 # disallow specified identifiers
    id-length: 0 # enforce minimum and maximum identifier lengths
    id-match: 0 # require identifiers to match a specified regular expression
    indent: [1, 4, {"SwitchCase": 1}] # 0, this option sets a specific tab width for your code
    jsx-quotes: 0 # enforce the consistent use of either double or single quotes in JSX attributes
    key-spacing: [1, { beforeColon: false, afterColon: true }] # [2, { beforeColon: false, afterColon: true }], enforces spacing between keys and values in object literal properties
    keyword-spacing: 1 # enforce consistent spacing before and after keywords
    linebreak-style: [0, unix] # [0, unix], disallow mixed 'LF' and 'CRLF' as linebreaks
    lines-around-comment: 0 # 0, enforces empty lines around comments
    max-depth: 0 # enforce a maximum depth that blocks can be nested
    max-len: 0 # enforce a maximum line length
    max-nested-callbacks: [0, 3] # [0, 2], specify the maximum depth callbacks can be nested
    max-params: 0 # enforce a maximum number of parameters in function definitions
    max-statements: 0 # enforce a maximum number of statements allowed in function blocks
    max-statements-per-line: 1 # enforce a maximum number of statements allowed per line
    new-cap: 2 # 2, require a capital letter for constructors
    new-parens: 2 # 2, disallow the omission of parentheses when invoking a constructor with no arguments
    newline-after-var: 0 # 0, allow/disallow an empty newline after var statement
    newline-before-return: 0 # require an empty line before return statements
    newline-per-chained-call: 0 # require a newline after each call in a method chain
    no-array-constructor: 2 # 2, disallow use of the Array constructor
    no-bitwise: 0 # disallow bitwise operators
    no-continue: 2 # 0, disallow use of the continue statement
    no-inline-comments: 0 # 0, disallow comments inline after code
    no-lonely-if: 2 # 0, disallow if as the only statement in an else block
    no-mixed-spaces-and-tabs: [1, false] # [2, false], disallow mixed spaces and tabs for indentation
    no-multiple-empty-lines: [1, {max: 2}] # [0, {max: 2}], disallow multiple empty lines
    no-nested-ternary: 1 # 0, disallow nested ternary expressions
    no-new-object: 2 # 2, disallow use of the Object constructor
    no-plusplus: 0 # disallow the unary operators ++ and --
    no-restricted-syntax: 0 # disallow specified syntax
    no-spaced-func: 2 # 2, disallow space between function identifier and application
    no-ternary: 0 # 0, disallow the use of ternary operators
    no-trailing-spaces: 1 # 2, disallow trailing whitespace at the end of lines
    no-underscore-dangle: 0 # 2, disallow dangling underscores in identifiers
    no-unneeded-ternary: 2 # 0, disallow the use of Boolean literals in conditional expressions
    no-whitespace-before-property: 1 # disallow whitespace before properties
    object-curly-spacing: [1, never] # [0, never], require or disallow padding inside curly braces
    object-property-newline: 1 # enforce placing object properties on separate lines
    one-var: [2, never] # 0, allow or disallow one variable declaration per function
    one-var-declaration-per-line: 1 # require or disallow newlines around var declarations
    operator-assignment: [1, always] # [0, always], require assignment operator shorthand where possible or prohibit it entirely
    operator-linebreak: [0, before] # 0, enforce operators to be placed before or after line breaks
    padded-blocks: [1, never] # 0, enforce padding within blocks
    quote-props: [1, as-needed] # 0, require quotes around object literal property names
    quotes: [2, double, avoid-escape] # [2, double], specify whether backticks, double or single quotes should be used
    require-jsdoc: [1, {require: {FunctionDeclaration: false, MethodDefinition: false, ClassDeclaration: false}}] # require JSDoc comments
    semi: 2 # 2, require or disallow use of semicolons instead of ASI
    semi-spacing: [2, {before: false, after: true}] # [2, {before: false, after: true}], enforce spacing before and after semicolons
    sort-vars: 0 # 0, sort variables within the same declaration block
    space-before-blocks: [1, always] # [0, always], require or disallow space before blocks
    space-before-function-paren: [1, {anonymous: always, named: never}] # [0, always], require or disallow space before function opening parenthesis
    space-in-parens: [1, never] # [0, never], require or disallow spaces inside parentheses
    space-infix-ops: 2 # 2, require spaces around operators
    space-unary-ops: [2, { words: true, nonwords: false }] # [2, { words: true, nonwords: false }], Require or disallow spaces before/after unary operators
    spaced-comment: 1 # 0, require or disallow a space immediately following the // or /* in a comment
    wrap-regex: 0 # 0, require regex literals to be wrapped in parentheses

  # ECMAScript 6
    arrow-body-style: 1 # 0, require braces around arrow function bodies
    arrow-parens: 1 # 0, require parentheses around arrow function arguments
    arrow-spacing: 1 # 0, enforce consistent spacing before and after the arrow in arrow functions
    constructor-super: 2 # 0, require super() calls in constructors
    generator-star-spacing: 1 # 0, enforce consistent spacing around * operators in generator functions
    no-class-assign: 2 # 0, disallow reassigning class members
    no-confusing-arrow: 0 # 0, disallow arrow functions where they could be confused with comparisons
    no-const-assign: 2 # 0, disallow reassigning const variables
    no-dupe-class-members: 2 # 0, disallow duplicate class members
    no-duplicate-imports: 2 # 0, disallow duplicate module imports
    no-new-symbol: 2 # 0, disallow new operators with the Symbol object
    no-restricted-imports: 0 # 0, disallow specified modules when loaded by import
    no-this-before-super: 2 # 0, disallow this/super before calling super() in constructors
    no-useless-computed-key: 1 # 0, disallow unnecessary computed property keys in object literals
    no-useless-constructor: 1 # 0, disallow unnecessary constructors
    no-var: 0 # 0, require let or const instead of var
    object-shorthand: 0 # 0, require or disallow method and property shorthand syntax for object literals
    prefer-arrow-callback: 0 # 0, require arrow functions as callbacks
    prefer-const: 0 # 0, require const declarations for variables that are never reassigned after declared
    prefer-reflect: 0 # 0, require Reflect methods where applicable
    prefer-rest-params: 0 # 0, require rest parameters instead of arguments
    prefer-spread: 0 # 0, require spread operators instead of .apply()
    prefer-template: 0 # 0, require template literals instead of string concatenation
    require-yield: 1 # 0, require generator functions to contain yield
    sort-imports: 0 # 0, enforce sorted import declarations within modules
    template-curly-spacing: 1 # 0, require or disallow spacing around embedded expressions of template strings
    yield-star-spacing: 1 # 0, require or disallow spacing around the * in yield* expressions
